    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeKLists(ListNode[] lists) {
            //问题的难点在于如何在k个节点中找到最小的节点，然后将其接到结果链表上
            if (lists.length == 0) return null;
            //虚拟头节点
            ListNode dummy = new ListNode(-1);
            ListNode p = dummy;
            //优先级队列，最小堆
            PriorityQueue<ListNode> pq = new PriorityQueue<>(
                    lists.length, (a,b)->(a.val - b.val));
            //将k个链表的头节点加入最小堆
            for (ListNode head : lists) {
                if (head != null) {
                    pq.add(head);
                }
            }

            while (!pq.isEmpty()) {
                //获取最小节点，接到结果链表中
                ListNode node = pq.poll();
                p.next = node;
                if (node.next != null) {
                    pq.add(node.next);
                }
                //p指针不断前进
                p = p.next;
            }

            return dummy.next;
        }
    }

//runtime:4 ms
//memory:43.6 MB
